{"version":3,"sources":["RecipeDetail.jsx","Recipe.jsx","Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["RecipeDetail","ingredients","map","className","key","uuidv4","text","Recipe","props","useState","show","setShow","style","width","src","img","alt","title","desc","toFixed","onClick","Footer","id","App","recipe","setRecipe","search","setSearch","query","setQuery","useEffect","getRecipe","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","index","url","label","calories","image","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mRAkBeA,EAfM,SAAC,GAChB,OADiC,EAAhBC,YACEC,KAAI,SAAAD,GACrB,OACI,oCACA,yBAAKE,UAAU,iBACf,uBAAIC,IAAKC,eACJJ,EAAYK,YCiBdC,EAvBA,SAACC,GAAW,IAAD,EAEMC,mBAAS,IAFf,gCAGEA,oBAAS,IAHX,mBAGfC,EAHe,KAGTC,EAHS,KAItB,OACI,oCACI,yBAAKR,UAAU,iBACX,yBAAKA,UAAU,OAAOS,MAAO,CAAEC,MAAO,UAClC,yBAAKC,IAAKN,EAAMO,IAAKZ,UAAU,yBAAyBa,IAAI,YAC5D,yBAAKb,UAAU,aACX,wBAAIA,UAAU,cAAcK,EAAMS,OAClC,uBAAGd,UAAU,aAAaK,EAAMU,KAAKC,QAAQ,IAE7C,4BAAQhB,UAAU,iCAAiCiB,QAAS,kBAAKT,GAASD,KAA1E,eACCA,GAAQ,kBAAC,EAAD,CAAcT,YAAaO,EAAMP,mBCHnDoB,EAZA,WACX,OACI,oCACA,4BAAQC,GAAG,UACP,yBAAKnB,UAAU,eACX,iECsEDoB,EArEH,WAEV,IAFgB,EAMYd,mBAAS,IANrB,mBAMTe,EANS,KAMDC,EANC,OAOYhB,qBAPZ,mBAOTiB,EAPS,KAODC,EAPC,OAQUlB,mBAAS,UARnB,mBAQTmB,EARS,KAQFC,EARE,KAWhBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAS,uCAAG,8BAAAC,EAAA,sEACOC,MAAM,mCAAD,OAAoCL,EAApC,mBAdf,WAce,oBAbd,qCAYE,cACVM,EADU,gBAEGA,EAASC,OAFZ,OAEVC,EAFU,OAGhBX,EAAUW,EAAKC,MACfC,QAAQC,IAAIH,GAJI,2CAAH,qDAgBf,OACE,oCACE,yBAAKjC,UAAU,iCACb,4CAEF,0BAAMqC,SAVQ,SAACC,GACjBA,EAAEC,iBACFb,EAASH,KASL,yBAAKvB,UAAU,iBACb,2BAAOwC,KAAK,OAAOC,YAAY,2BAA2BC,MAAOnB,EAAQoB,SAhB5D,SAACL,GACpBd,EAAUc,EAAEM,OAAOF,QAeoF1C,UAAU,mBAC3G,4BAAQA,UAAU,qCAAlB,YAGJ,yBAAKA,UAAU,0BACf,2DAEA,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,qBAEXqB,EAAOtB,KAAI,SAACsB,EAAQwB,GAAT,OACT,kBAAC,EAAD,CACE5C,IAAKC,cACLiB,GAAIE,EAAOwB,GACXC,IAAKzB,EAAOA,OAAOyB,IACnBhC,MAAOO,EAAOA,OAAO0B,MACrBhC,KAAMM,EAAOA,OAAO2B,SACpBlD,YAAauB,EAAOA,OAAOvB,YAC3Bc,IAAKS,EAAOA,OAAO4B,cAM/B,kBAAC,EAAD,QC3DcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.b572378c.chunk.js","sourcesContent":["import React from 'react';\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\nconst RecipeDetail = ({ingredients}) =>{\r\n      return ingredients.map(ingredients =>{\r\n        return(\r\n            <>\r\n            <div className=\"recipe-detail\">\r\n            <p  key={uuidv4()}>\r\n                {ingredients.text}\r\n            </p>\r\n            </div>\r\n            </>\r\n        )\r\n        });\r\n    \r\n}\r\n\r\nexport default RecipeDetail;","import React, {useState} from 'react';\r\nimport RecipeDetail from './RecipeDetail';\r\n\r\nconst Recipe = (props) => {\r\n    \r\n    const [recipe, setRecipe] = useState([]);\r\n    const [show, setShow] = useState(false);\r\n    return (\r\n        <>\r\n            <div className=\"col-md-3 py-3\">\r\n                <div className=\"card\" style={{ width: '18rem' }}>\r\n                    <img src={props.img} className=\"card-img-top img-fluid\" alt=\"foo-img\" />\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">{props.title}</h5>\r\n                        <p className=\"card-text\">{props.desc.toFixed(2)}</p>\r\n                        {/* <a className=\"btn btn-sm btn-primary\" target=\"_blank\" href={props.url}>Ingredients</a> */}\r\n                        <button className=\"btn btn-sm btn-primary ing-btn\" onClick={() =>setShow(!show)}>Ingredients</button>\r\n                        {show && <RecipeDetail ingredients={props.ingredients}/>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        </>\r\n    );\r\n}\r\n\r\nexport default Recipe;","import React from 'react';\r\n\r\nconst Footer = () =>{\r\n    return(\r\n        <>\r\n        <footer id=\"footer\">\r\n            <div className=\"footerStyle\">\r\n                <p>Food Recipe Application | Khan</p>\r\n            </div>\r\n        </footer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { useEffect, useState } from 'react';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/bootstrap/dist/js/bootstrap.bundle';\nimport Recipe from './Recipe';\nimport Footer from './Footer';\nimport {v4 as uuidv4} from 'uuid';\n// import './App.css';\n\nconst App = () => {\n\n  const APP_ID = \"764ddc86\";\n  const APP_KEY = \"293a7f6dad1a3d1bc0092eabe644a668\";\n  // const requestURL = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`;\n\n  const [recipe, setRecipe] = useState([]);\n  const [search, setSearch] = useState();\n  const [query, setQuery] = useState(\"Banana\");\n\n\n  useEffect(() => {\n    getRecipe();\n  }, [query]);\n\n  const getRecipe = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipe(data.hits);\n    console.log(data);\n  }\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  }\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n  }\n\n  return (\n    <>\n      <div className=\"food-heading text-center py-5\">\n        <h1>Food Recipe</h1>\n      </div>\n      <form onSubmit={getSearch}>\n        <div className=\"input-section\">\n          <input type=\"text\" placeholder=\"What do you want to eat?\" value={search} onChange={updateSearch} className=\"py-2 pl-2 w-25\" />\n          <button className=\"btn btn-outline-warning py-2 ml-2\">Search</button>\n        </div>\n      </form>\n      <div className=\"intro-head text-center\">\n      <h1>What are you making today?</h1>\n      </div>\n      <div className=\"content_ max-width\">\n        <div className=\"row\">\n          <div className=\"col-md-12 content\">\n            {\n              recipe.map((recipe, index) => (\n                <Recipe\n                  key={uuidv4()}\n                  id={recipe[index]}\n                  url={recipe.recipe.url}\n                  title={recipe.recipe.label}\n                  desc={recipe.recipe.calories}\n                  ingredients={recipe.recipe.ingredients}\n                  img={recipe.recipe.image} />\n              ))\n            }\n          </div>\n        </div>\n      </div>\n      <Footer/>\n    </>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}